repeat task.wait(1) until game.IsLoaded and (game.Players.LocalPlayer or game.Players.PlayerAdded:Wait()) and (game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait())
if Ran then 
	return
else
	getgenv().Ran = true
end
print('Loaded!')
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
function TPReturner()
	local Site;
	if foundAnything == "" then
		Site = game:GetService("HttpService"):JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
	else
		Site = game:GetService("HttpService"):JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
	end
	local ID = ""
	if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
		foundAnything = Site.nextPageCursor
	end
	local num = 0;
	for i,v in pairs(Site.data) do
		local Possible = true
		ID = tostring(v.id)
		if tonumber(v.maxPlayers) > tonumber(v.playing) then
			for _,Existing in pairs(AllIDs) do
				if num ~= 0 then
					if ID == tostring(Existing) then
						Possible = false
					end
				else
					if tonumber(actualHour) ~= tonumber(Existing) then
						local delFile = pcall(function()
							delfile("NotSameServers.json")
							AllIDs = {}
							table.insert(AllIDs, actualHour)
						end)
					end
				end
				num = num + 1
			end
			if Possible == true then
				table.insert(AllIDs, ID)
				task.wait()
				pcall(function()
					writefile("NotSameServers.json", game:GetService("HttpService"):JSONEncode(AllIDs))
					task.wait()
					game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
				end)
				task.wait(4)
			end
		end
	end
end

---[Functions]---

local HTTP = game:GetService("HttpService")

function Teleport()
	while task.wait() do
		pcall(function()
			TPReturner()
			if foundAnything ~= "" then
				TPReturner()
			end
		end)
	end
end

local function SendNotification(Text)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "FruitFinder";
		Text = Text
	})
end

local function SendPost(desc)
	if _G.WebHook == "" or nil then return end
	local response = syn.request(
		{
			Url = _G.WebHook,
			Method = 'POST',
			Headers = {
				['Content-Type'] = "application/json"
			},
			Body = HTTP:JSONEncode({
				['content'] = "",
				['embeds'] = {{
					['title'] = "Fruit Finder",
					["description"] = desc,
					["type"] = "rich",
					["color"] = tonumber(0x7A067C),
				}}
			})
		})
end

task.wait(5)
---[AutoTeam]---

local HTTP = game:GetService("HttpService")
local WS = game:GetService("Workspace")
local RS = game:GetService("ReplicatedStorage")
local TS, TInfo = game:GetService("TweenService"), TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
local Camera = WS:WaitForChild("Camera")
local CommF = RS.Remotes.CommF_

local plr = game:GetService("Players").LocalPlayer
local chr = plr.Character or plr.CharacterAdded:Wait()
local hrp = chr:WaitForChild("HumanoidRootPart")
local hum = chr:WaitForChild("Humanoid")

local Main = plr.PlayerGui:WaitForChild("Main")
local CT = Main:WaitForChild("ChooseTeam")
local GM = require(RS:WaitForChild("GuideModule"))
local SideCompass = GM.SideCompass

Camera.CameraType = Enum.CameraType.Custom
Camera.CameraSubject = hum
CommF:InvokeServer("SetTeam", "Pirates")

CT.Visible = false
CT:Destroy()
SideCompass.Visible = true
Main.MenuButton.Visible = true
Main.Beli.Visible = true
Main.Level.Visible = true
Main.HP.Visible = true
Main.Energy.Visible = true
Main.Mute.Visible = true
Main.Code.Visible = true
Main.Settings.Visible = true
Main.Fragments.Visible = true
Main:WaitForChild("AlliesButton").Visible = true
Main:WaitForChild("HomeButton").Visible = true
Main.CrewButton.Visible = true
Main.Crew.Visible = true
Main.Code.Position = Main.CrewButton.Position + UDim2.new(0, 90, 0, 0)
Main.HomeButton.Position = Main.CrewButton.Position + UDim2.new(0, 60, 0, 0)
Main.AlliesButton.Position = Main.CrewButton.Position + UDim2.new(0, 30, 0, 0)

local plr = game.Players.LocalPlayer
local chr = plr.Character
local t = game.TweenService

local bv = Instance.new("BodyVelocity")
bv.MaxForce = Vector3.new(1/0, 1/0, 1/0)
bv.Velocity = Vector3.new()
bv.Name = "bV"
local bav = Instance.new("BodyAngularVelocity")
bav.AngularVelocity = Vector3.new()
bav.MaxTorque = Vector3.new(1/0, 1/0, 1/0)
bav.Name = "bAV" 

SendNotification("Loaded!")

local FruitsAllowed = _G.FruitsAllowed
for _,v in next, workspace:GetChildren() do
	if v.Name:find("Fruit") and (v:IsA("Tool") or v:IsA("Model")) then
		for i,a in pairs(FruitsAllowed) do
			if v.Name == a then
				continue
			else
				return
			end
		end
		SendNotification("Found Fruit!")
		repeat 
			local anc1 = bv:Clone()
			anc1.Parent = chr.HumanoidRootPart
			local anc2 = bav:Clone()
			anc2.Parent = chr.HumanoidRootPart
			local p = t:Create(chr.HumanoidRootPart, TweenInfo.new((plr:DistanceFromCharacter(v.Handle.Position)-100)/320, Enum.EasingStyle.Linear), {CFrame=v.Handle.CFrame + Vector3.new(0, v.Handle.Size.Y, 0)})
			p:Play()
			p.Completed:Wait()
			chr.HumanoidRootPart.CFrame = v.Handle.CFrame
			anc1:Destroy()
			anc2:Destroy()
			task.wait(1)
		until v.Parent ~= workspace
		task.wait(1)
		local fruit = chr:FindFirstChildOfClass("Tool") and chr:FindFirstChildOfClass("Tool").Name:find("Fruit") and chr:FindFirstChildOfClass("Tool") or (function()
			for _,fr in plr.Backpack:GetChildren() do
				if fr.Name:find("Fruit") then
					return fr
				end 
			end
		end)()
		game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", fruit:GetAttribute("OriginalName"), fruit)
		task.wait(1)
		if plr.BackPack.FindFirstChildOfClass(fruit) and plr.Character:FindFirstChildOfClass(fruit) then
			return SendNotification('Failed to Store')
		else
			SendPost("Stored Fruit")
		end
	end
end
SendNotification("No Fruit Detected.")
task.wait(2.5)
Teleport()
