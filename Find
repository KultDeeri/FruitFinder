repeat task.wait() until game:IsLoaded()
task.wait(5)
print("Loaded!")
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
function TPReturner()
	local Site;
	if foundAnything == "" then
		Site = game:GetService("HttpService"):JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
	else
		Site = game:GetService("HttpService"):JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
	end
	local ID = ""
	if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
		foundAnything = Site.nextPageCursor
	end
	local num = 0;
	for i,v in pairs(Site.data) do
		local Possible = true
		ID = tostring(v.id)
		if tonumber(v.maxPlayers) > tonumber(v.playing) then
			for _,Existing in pairs(AllIDs) do
				if num ~= 0 then
					if ID == tostring(Existing) then
						Possible = false
					end
				else
					if tonumber(actualHour) ~= tonumber(Existing) then
						local delFile = pcall(function()
							delfile("NotSameServers.json")
							AllIDs = {}
							table.insert(AllIDs, actualHour)
						end)
					end
				end
				num = num + 1
			end
			if Possible == true then
				table.insert(AllIDs, ID)
				task.wait()
				pcall(function()
					writefile("NotSameServers.json", game:GetService("HttpService"):JSONEncode(AllIDs))
					task.wait()
					game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
				end)
				task.wait(4)
			end
		end
	end
end
---[Variables]---

local HTTP = game:GetService("HttpService")
local WS = game:GetService("Workspace")
local RS = game:GetService("ReplicatedStorage")
local TS, TInfo = game:GetService("TweenService"), TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
local Camera = WS:WaitForChild("Camera")
local CommF = RS.Remotes.CommF_

--Player Variables--

local plr = game:GetService("Players").LocalPlayer
local chr = plr.Character or plr.CharacterAdded:Wait()
local hrp = chr:WaitForChild("HumanoidRootPart")
local hum = chr:WaitForChild("Humanoid")

---[Functions]---

function Teleport()
	while task.wait() do
		pcall(function()
			TPReturner()
			if foundAnything ~= "" then
				TPReturner()
			end
		end)
	end
end

local function SendNotification(Text)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "FruitFinder";
		Text = Text
	})
end

local function SendPost(desc)
	if _G.WebHook == "" or nil then return end
	local response = syn.request(
		{
			Url = _G.WebHook,
			Method = 'POST',
			Headers = {
				['Content-Type'] = "application/json"
			},
			Body = HTTP:JSONEncode({
				['content'] = "",
				['embeds'] = {{
					['title'] = "Fruit Finder",
					["description"] = desc,
					["type"] = "rich",
					["color"] = tonumber(0x7A067C),
				}}
			})
		})
end

---[AutoTeam]---

local Main = plr.PlayerGui:WaitForChild("Main")
local CT = Main:WaitForChild("ChooseTeam")
local GM = require(RS:WaitForChild("GuideModule"))
local SideCompass = GM.SideCompass

Camera.CameraType = Enum.CameraType.Custom
Camera.CameraSubject = hum
CommF:InvokeServer("SetTeam", "Pirates")

CT.Visible = false
CT:Destroy()
SideCompass.Visible = true
Main.MenuButton.Visible = true
Main.Beli.Visible = true
Main.Level.Visible = true
Main.HP.Visible = true
Main.Energy.Visible = true
Main.Mute.Visible = true
Main.Code.Visible = true
Main.Settings.Visible = true
Main.Fragments.Visible = true
Main:WaitForChild("AlliesButton").Visible = true
Main:WaitForChild("HomeButton").Visible = true
Main.CrewButton.Visible = true
Main.Crew.Visible = true
Main.Code.Position = Main.CrewButton.Position + UDim2.new(0, 90, 0, 0)
Main.HomeButton.Position = Main.CrewButton.Position + UDim2.new(0, 60, 0, 0)
Main.AlliesButton.Position = Main.CrewButton.Position + UDim2.new(0, 30, 0, 0)
task.wait(2.5)

SendNotification("Loaded!")

task.spawn(function()
	for _, Fruit in pairs(WS:GetChildren()) do
		if Fruit:IsA("Tool") and Fruit.Name:find("Fruit") then
			for _, FruitsTable in pairs(_G.AllowedFruits) do
				if FruitsTable == Fruit.Name then
					local FruitHandle = Fruit:WaitForChild("Handle")
					hrp.Anchored = true
					SendNotification("Found "..Fruit.Name.."!")

					repeat task.wait()
						if Fruit.Parent ~= WS then break end
						hrp.Anchored = true
						TS:Create(hrp, TInfo, {CFrame = CFrame.new(FruitHandle.Position, hrp.Position)}):Play()
						task.spawn(function()
							local Dist = (hrp.Position - FruitHandle.Position).Magnitude
							if Dist <= 1 then
								hrp.Anchored = false
							else
								hrp.Anchored = true
							end
						end)
					until hrp.Position == FruitHandle.Position or chr:FindFirstChild(Fruit.Name)
					hrp.Anchored = false
					if not chr:FindFirstChild(Fruit.Name) then break end
					local FruitName = Fruit.Name:split(' ')
					CommF:InvokeServer("StoreFruit", FruitName[1].."-"..FruitName[1], Fruit.Name)
					
					if not chr:FindFirstChild(Fruit.Name) or not plr.Backpack:FindFirstChild(Fruit.Name) then
						SendPost("Stored "..Fruit.Name)
						SendNotification("Stored Fruit!")
					else return SendNotification("Failed to Store Fruit!") end
					task.wait(2.5)
				end
			end
		end
	end
	SendNotification("No Fruit Detected.")
	task.wait(1)
	Teleport()
end)
